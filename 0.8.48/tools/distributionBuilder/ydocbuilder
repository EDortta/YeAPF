#!/usr/bin/php
<?php
/*
    tools/distributionBuilder/ydocbuilder
    YeAPF 0.8.48-42 built on 2016-04-06 11:03 (-3 DST)
    Copyright (C) 2004-2016 Esteban Daniel Dortta - dortta@yahoo.com
    2016-04-06 11:02:18 (-3 DST)
*/

  function _parseFile($filename, $p, $funcNameBase='')
  {
    global $verbose;

    $retData=array();
    $retData['filename']=basename($filename);
    $retData['folder']=urlencode(dirname($filename));
    $retData['functions']=array();
    $funcNdx=0;
    $funcNdxNum=0;

    $token_minus_1 = $token_minus_2 = '';
    $token='';
    $type=0;
    $nestingLevel=0;
    do {
      $ok=$p->get($token,$type);
      // echo "\n[ $token ] ".$p->commentLevel;

      if ($ok) {
        if ($token=='{')
          $nestingLevel++;
        else if ($token=='}') {
          $nestingLevel--;
          if ($nestingLevel<=0)
            $ok=false;
        }
        // if ($verbose)  echo "$token $type (".$p->commentLevel.")  ";
        if ($ok) {

          /*
              wait for a 'function'
              In php, functions are declared as function name (...)
              In javascript it can be declared as var name = function (...)
          */
          $token==strtolower($token);
          if ( ($token=='function') ||
               ($token=='class') ) {
            $p->toDebug=false;
            // get the function name
            if ($token_minus_1=='=') {
              $funcName = $token_minus_2;
              $ok=true;
            } else {
              $ok=$p->get($funcName, $type);
              $ok=$ok && $type==3;
            }
            if ($funcNameBase>'')
              $funcName="$funcNameBase.$funcName";
            if ($ok) {
              if ($verbose) echo "\nfunc: $funcName (type: $type)";
              //if ($verbose) echo "l: ".$p->line()." c:".$p->col().'  ';
              $funcNdxNum++;
              $funcNdx=$funcName;
              $retData['functions'][$funcNdx] = array();

              $funcStartLine = $p->line();
              // get the first parentheses or curly bracket
              $ok=$p->get($token, $type);
              if ($ok) {
                if ($token=='(') {
                  $funcParam = array();
                  if (isset($default))
                    unset($default);
                  while (($token!=')') && (!$p->eof())) {
                    // pick parameter name
                    $p->get($token, $type);
                    if ($verbose) echo "\ttoken: $token type: $type";
                    if (($type==2) || ($type==3)) {
                      $paramName=$token;
                      if ($verbose) echo " { $paramName $type } ";
                      $paramName = str_replace('$','',$paramName);
                      $funcParam[$paramName]=array();

                      $p->get($token, $type);
                      if (($type==6) && ($token=='=')) {
                        if ($p->toDebug) echo " getting default value ";
                        // pick default value
                        $p->get($token, $type);
                        $default=$token;
                        $k=0;

                        if (!(($type==1) || ($type==3) || ($type==5))) {

                          $nroParentesis=0;
                          while ((!$p->eof()) && ($token!=',')) {
                            $p->get($token, $type);
                            if ($token=='(')
                              $nroParentesis++;
                            else if ($token==')') {
                              $nroParentesis--;
                            }

                            if ($token!=',')
                              $default.=' '.$token;
                            $k++;
                            if ($k>10)
                              die();
                            if ($nroParentesis==0)
                              break;
                          }

                          $type=5;

                        }

                        if (($type==1) || ($type==3) || ($type==5)) {
                          $default = urlencode($default);
                          if ($type==1)
                            $default = unquote($default);

                          if ($type==5)
                            $default = strtolower(unquote($default));

                          $funcParam[$paramName]['default']=$default;
                          $p->get($token, $type);
                        } else
                          $funcParam[$paramName]['dummy']='ok';
                      } else
                        $funcParam[$paramName]['dummy']='ok';

                    }
                  }

                  $retData['functions'][$funcNdx]['name']=$funcName;
                  $retData['functions'][$funcNdx]['parameters']=$funcParam;

                  $p->get($token, $type);
                  $code='';
                  if ($token=='{') {
                    $p->rewind();
                    $inner=(_parseFile($filename, $p, $funcName));
                    if (isset($inner['functions']))
                      $retData['functions'][$funcNdx]['inner']=$inner;
                  }
                  $funcEndLine = $p->line();
                  if ($verbose) echo " $funcStartLine .. $funcEndLine";
                  $funcMD5=md5($code);
                  $retData['functions'][$funcNdx]['code']=array();
                  $retData['functions'][$funcNdx]['code']['md5']=$funcMD5;
                  $retData['functions'][$funcNdx]['code']['start']=$funcStartLine;
                  $retData['functions'][$funcNdx]['code']['end']=$funcEndLine;
                } else if ($token=='{') {
                  /* funcNameBase is now the classname */
                  $funcNameBase=$funcName;
                  $retData['classes'][$funcNameBase]['name']=$funcName;
                  $p->rewind();
                  $code='';
                  $inner=(_parseFile($filename, $p, $funcName));
                  if ((isset($inner['functions'])) || (isset($inner['classes']))) {
                    unset($inner['filename']);
                    unset($inner['folder']);
                    $retData['classes'][$funcNameBase]=$inner;
                  }
                  $funcEndLine = $p->line();
                  if ($verbose) echo " $funcStartLine .. $funcEndLine";
                  $funcMD5=md5($code);
                  $retData['classes'][$funcNameBase]['code']=array();
                  $retData['classes'][$funcNameBase]['code']['md5']=$funcMD5;
                  $retData['classes'][$funcNameBase]['code']['start']=$funcStartLine;
                  $retData['classes'][$funcNameBase]['code']['end']=$funcEndLine;
                }
              }
            }
          }
          $p->toDebug=false;
        }
        $token_minus_2=$token_minus_1;
        $token_minus_1=$token;
      }
    } while ($ok);

    return $retData;
  }

  function processSourceFile($filename)
  {
    global $src, $arrData, $arrNdx, $verbose;

    if ($verbose) echo "\n\n$filename\n==================================================";
    $arrNdx++;
    $ndx="file_".$arrNdx;

    $ndx=basename($filename);

    $f=join('',file($filename));
    $p=new xParser($f);
    $p->toDebug=false;

    $arrData[$ndx]=_parseFile($filename, $p);

  }

  function processSourceFolder($folderOrFile)
  {
    global $src;

    if (is_dir($folderOrFile))
      $folderOrFile="$folderOrFile/*";
    $folderOrFile=str_replace('//','/',$folderOrFile);
    $d = glob($folderOrFile);
    foreach($d as $filename) {
      if (is_dir($filename)) {
        if (($filename!='.') && ($filename!='..'))
          processSourceFolder("$filename");
      } else {
        $ext = strtolower(pathinfo($filename, PATHINFO_EXTENSION));
        if (($ext == 'js') || ($ext == 'php'))
          processSourceFile("$filename");
      }
    }
  }

  function processFileList($sourceFolder, $files)
  {
    foreach($files as $k) {
      //$k=preg_replace('/[^A-Za-z0-9\*\.\/\-]/', '', $k);
      $k=str_replace("\n",'',$k);
      $k=str_replace("\r",'',$k);
      $k=str_replace("\t",'',$k);
      if ($k>'')
        if (substr($k,0,2)!='//')
          if (substr($k,0,1)!='#')
            processSourceFolder($k);
    }
  }

  $mydir=dirname($_SERVER['SCRIPT_FILENAME']);
  $cmRequired=false;
  if (file_exists("$mydir/yclilib.php"))
    $cmLocation = "$mydir/yclilib.php";
  else
    $cmLocation = "$mydir/../yclilib.php";

  (@include_once "$cmLocation") or die("yclilib.php not found\n");


  $cwd=getcwd();
  $args = new ArgumentsProcessor(false);
  $myself=basename($argv[0]);
  $verbose=$args->argValue('v;verbose',0);
  $verbose = ($verbose===__TRUE__);

  echo "YeAPF 0.8.48 $myself\nCopyright (C) 2004-2016 Esteban Daniel Dortta - dortta@yahoo.com\n";
  if ($args->argValue('h;help')==true) {
    die("usage:\n\t$myself [--prior <folder>] [--verbose] [source-folder]\n\t--prior <folder>\tlocation of the prior version of this folder\n\t\t\t\tif none is specified, then an all-new version\n\t\t\t\twill be created\n\t[--verbose|-v]\tShow files being processed\n\nIt will use ydistbuilder.files to find files.\nYou can set a list of unwanted files in ydocbuilder.avoid\n");
  }

  if (file_exists('ydistbuilder.files')) {
    $projectBase='.';
  } else if (file_exists(dirname($_SERVER["_"])."/ydistbuilder.files"))
    $projectBase=dirname($_SERVER["_"]);
  else
    die("Please create 'ydistbuilder.files' with file list\n");

  $files=file("$projectBase/ydistbuilder.files");
  $avoid=file_exists("$projectBase/ydocbuilder.avoid")?file("$projectBase/ydocbuilder.avoid"):array();

  _LOAD_YEAPF_();
  $files=y_array_diff($files, $avoid);

  $src = trim($args->getSrc(0));
  if ($src=='')
    $src='.';

  while (substr($src,strlen($src)-1,1)=='/')
    $src=substr($src,0,strlen($src)-1);

  $xmlFilename = basename(getcwd()).".xdb";
  $arrData = array();
  // processSourceFolder("$src");
  processFileList($src, $files);

  $xmlData = '';
  xq_printXML($xmlData, 'root', $arrData);
  if ($verbose) echo "\n\n";
  echo "writting to $xmlFilename\n";
  if ($verbose) echo "cwd=".getcwd();
  $xmlData="<?xml version='1.0' encoding='ISO-8859-1'?>\n".$xmlData;
  file_put_contents($xmlFilename,$xmlData);
?>
