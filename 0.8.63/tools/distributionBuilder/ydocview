#!/usr/bin/php
<?php
/*
tools/distributionBuilder/ydocview
YeAPF 0.8.63-113 built on 2019-07-12 15:23 (-3 DST)
Copyright (C) 2004-2019 Esteban Daniel Dortta - dortta@yahoo.com - MIT License
2019-07-12 14:37:07 (-3 DST)
*/

if (!function_exists("objet2array")) {
  function object2array($object) {
    return @json_decode(@json_encode($object), 1);
  }
}

global $outputFiles, $ofNdx, $aSequence, $aMap;
$ofNdx       = -1;
$aSequence   = -1;
$aMap        = array();
$outputFiles = array();

function writeHTMLHeader($margin, $title="") {
  global $outputFiles, $ofNdx;
  $auxBase = str_replace("//", "/", dirname($outputFiles[$ofNdx]));
  $slashCount = substr_count($auxBase,"/")-1;
  $base     = str_repeat("../", $slashCount);
  $thisFileName=$title;
  if ($title=="")
    $thisFileName=$outputFiles[$ofNdx];

  $thisFileName=str_replace(".html", "", $thisFileName);
  $thisFileName="<a onclick='goBack()'><i class='fa fa-chevron-left' aria-hidden='true'></i></a>&nbsp;$thisFileName";

  file_put_contents($outputFiles[$ofNdx], "\n<!-- [ $base ] -->\n", FILE_APPEND);

  if (true) {
    $htmlText = "<!DOCTYPE html>
                  <html lang='en'>
                    <head>
                      <meta charset='utf-8' />
                      <meta http-equiv='x-ua-compatible' content='ie=edge' />
                      <meta name='viewport' content='width=device-width, initial-scale=1' />

                      <title>$title</title>

                      <link rel='stylesheet' href='".$base."css/normalize.css' />
                      <link rel='stylesheet' href='".$base."css/milligram.css' />
                      <link rel='stylesheet' href='".$base."css/roboto.css' />
                      <link rel='stylesheet' href='".$base."css/font-awesome.css' />
                      <link rel='icon' href='".$base."images/favicon.png' />
                      <script src='".$base."js/yloader.min.js'></script>
                      <script src='".$base."js/ydocviewer.js'></script>
                    </head>

                    <style>
                      .docEntry {
                        padding-left: 16px;
                      }
                    </style>

                    <script>
                    window.homeHistoryPosition = 0;
                      function goBack() {window.history.go(homeHistoryPosition);}
                    </script>

                    <body><h2>$thisFileName</h2>\n";
  } else {
    $htmlText="<!DOCTYPE html><html lang='en'><body>\n";
  }
  $htmlText .= "\n<!-- ".dirname($outputFiles[$ofNdx])."/$base -->\n";
  file_put_contents($outputFiles[$ofNdx], $htmlText, FILE_APPEND);
  chmod($outputFiles[$ofNdx], 0755);
}

function writeHTMLFooter($margin) {
  global $outputFiles, $ofNdx;
  $htmlText = "<hr>\n";
  if ($margin<=1)
    $htmlText.="<small>YeAPF documenter 0.8.63 - Copyright (C) 2004-2019 Esteban Daniel Dortta - dortta@yahoo.com - MIT License</small></body></html>\n";
  file_put_contents($outputFiles[$ofNdx], $htmlText, FILE_APPEND);
  chmod($outputFiles[$ofNdx], 0755);
}

function replace_extension($filename, $new_extension) {
    $info = pathinfo($filename);
    $currentExt = '.'.$info['extension'];
    return $info['dirname'].'/'.$info['filename'] . $new_extension;
}

function writeHTMLInfo($htmlText, $detailName="", $detail=null) {
  global $baseToExport, $mdSourceFolder, $toExport, $outputFiles, $ofNdx, $aMap, $aSequence, $doPartial;

  $canDo = false;
  if ($toExport) {
    $htmlText = trim($htmlText);
    if ($htmlText > '') {
      $aSequence++;
      $aName          = $detailName; //md5($aSequence);
      $targetFileName = substr($outputFiles[$ofNdx], strlen($baseToExport) + 1);
      if ($detailName > "") {
        $sourceFilename = replace_extension($outputFiles[$ofNdx], ".auxmd");
        $sourceFilename = str_replace(".auxmd", "-$detailName.md", $sourceFilename);
        if (!file_exists($sourceFilename)) {
          if ($mdSourceFolder!=$baseToExport) {
            $sourceFilename = str_replace($baseToExport, $mdSourceFolder, $sourceFilename);
          }
        }
        if (file_exists($sourceFilename)) {
          $Parsedown = new Parsedown();
          $sourceFileContent = @file_get_contents($sourceFilename);
          $sourceFilename = substr($sourceFilename, strlen($baseToExport));
          $documentationText = $Parsedown->text($sourceFileContent."\n\n>$sourceFilename");

          $pattern = '/<a[^>]+href=([\'"])(?<href>\/[a-z\-\/\.\#]*)\1[^>]*>/i';
          $documentationText = preg_replace_callback($pattern, function ($matches) {
                    global $baseToExport;
                    $aux=$matches[0];
                    $c=substr_count($matches[0], "/")-1;
                    $cc=preg_match('/([\'\"])(?<href>\/[a-z\-\/\.\#]*)\1[^>]*>/i', $matches[0], $arranjo);
                    if ($cc) {
                      $quote=$arranjo[1];
                      $url=str_repeat("../", $c).$arranjo[2];
                      $aux=str_replace("//", "/", "<a href=\"$url\">");
                    }
                    return $aux;
                }, $documentationText);
          $canDo=true;
        } else {
          $documentationText="File <b>$sourceFilename</b> not found.";
          $canDo = !$doPartial;
        }
      } else {
        $documentationText="Write your doc here...";
        $canDo=true;
      }
      if ($canDo) {
        /* main index entry */
        if (!isset($aMap[$targetFileName]))
          $aMap[$targetFileName] = array();
        $aMap[$targetFileName][$htmlText] = $targetFileName . "#$aName";

        if (is_array($detail)) {
          if ((isset($detail['code'])) && (!$doPartial)) {
            $codeInfo = ' md5: '.$detail['code']['md5'].' start: '.$detail['code']['start'].' end: '.$detail['code']['end'];
            $documentationText = "\n\n<div><pre>$codeInfo</pre></div>\n\n$documentationText\n\n";
          }
        }
        /* html body */
        $htmlText = "<div class='container'><div class='row'><div class='column'><a name='$aName'></a><h3><a href='#$aName' class='expand-document' data-id='$aName'><i class='fa fa-caret-right expander-$aName'></i>&nbsp;&nbsp;$htmlText</a></h3></div></div><div class='row'><div class='column'><div class='docEntry' id='$aName' style='display: none'>$documentationText</div></div></div></div>";
        file_put_contents($outputFiles[$ofNdx], $htmlText, FILE_APPEND);
        chmod($outputFiles[$ofNdx], 0755);
      }
    }
  }
  return $canDo;
}

function showXdbInfo($margin, $xml, $type = 'file') {
  global $baseToExport, $toExport, $outputFiles, $ofNdx, $toDestroy;

  $toDebug = true;

  $oldOfNdx = $ofNdx;

  $textReturn = "";
  if (isset($xml)) {
    $xml       = object2array($xml);
    $marginStr = str_repeat(" ", $margin * 2);
    foreach ($xml as $info => $detail) {
      if ($type == 'file') {
        if (isset($detail['folder'])) {
          $textReturn .= urldecode($marginStr . "$info at " . $detail['folder'] . "\n");
          if ($toExport) {
            $auxOutFolder = urldecode("$baseToExport/" . $detail['folder']);
            if (!file_exists($auxOutFolder))
              mkdir($auxOutFolder, 0755, true);
            $ofNdx++;
            $outputFiles[$ofNdx] = "$auxOutFolder/$info.html";
            if ($toExport) {
              if (file_exists($outputFiles[$ofNdx])) {
                if ($toDestroy) {
                  if (!unlink($outputFiles[$ofNdx]))
                    die("'" . $outputFiles[$ofNdx] . "' cannot be deleted");
                } else
                  die("'" . $outputFiles[$ofNdx] . "' already exists. Use '-d' to destroy\n");
              }
            }
          }
        }
      } else if ($type == 'func') {
        if (!is_numeric($info)) {
          if (isset($detail['name']))
            $detailName = $detail['name'];
          else
            $detailName = "";
          $funcDeclaration = urldecode($marginStr . "function " . $detailName . " (");
          $pCount          = 0;
          if (isset($detail['parameters'])) {
            foreach ($detail['parameters'] as $paramName => $dummy) {
              if ($pCount++ > 0)
                $funcDeclaration .= ", ";
              $funcDeclaration .= $paramName;
            }
          }
          $funcDeclaration .= ")\n";
          if (writeHTMLInfo($funcDeclaration, $detailName, $detail)) {
            if ($detailName>"") {
              $textReturn .= $funcDeclaration;            
            }
          }

        }
      } else if ($type == 'class') {
        if (!is_numeric($info)) {
          $textReturn .= urldecode($marginStr . "class $info\n");
          writeHTMLInfo("class $info");
        }
      } else if ($type == 'inner') {
        $textReturn .= "*";
      }
      if ($type == 'file') {
        writeHTMLHeader($margin, $outputFiles[$ofNdx]);
      }
      $insideInfo = viewInside($margin, $detail);
      if ($type == 'file') {
        writeHTMLFooter($margin);
      }
      $textReturn .= $insideInfo;
    }
  }
  $ofNdx = $oldOfNdx;
  return $textReturn;
}

function viewInside($margin, $detail) {

  $textReturn = "";
  $marginStr  = str_repeat(" ", $margin * 2);

  if (isset($detail['inner'])) {
    $textReturn .= viewInside($margin + 1, $detail['inner']);
  }
  if (isset($detail['classes'])) {
    $textReturn .= showXdbInfo($margin + 1, $detail['classes'], 'class');
  }
  if (isset($detail['functions'])) {
    $textReturn .= showXdbInfo($margin + 1, $detail['functions'], 'func');
  }

  return $textReturn;
}

$mydir      = dirname($_SERVER['SCRIPT_FILENAME']);
$cmRequired = false;
if (file_exists("$mydir/yclilib.php"))
  $cmLocation = "$mydir/yclilib.php";
else
  $cmLocation = "$mydir/../yclilib.php";

(@include_once "$cmLocation") or die("yclilib.php not found\n");

$parseDownLibPresent=false;
if (file_exists("$mydir/lib/Parsedown.php")) {
  (@include_once "$mydir/lib/Parsedown.php") or die("$mydir/lib/Parsedown.php not found\n");
  $parseDownLibPresent=true;
}
else
  echo "Parsedown library ($mydir/lib/Parsedown.php) not found.\nYou cannot do partial documentation\n";

$cwd            = getcwd();
$args           = new ArgumentsProcessor(false);
$myself         = basename($argv[0]);
$filename       = $args->getSrc(0);
$baseToExport   = $args->getSrc(1);
$mdSourceFolder = $args->argValue('mdsource;s', $baseToExport);
$toHelp         = $args->argValue('help;h', __FALSE__) == __TRUE__;
$toDestroy      = $args->argValue('destroy;d', __FALSE__) == __TRUE__;
$doQuiet        = $args->argValue('quiet;q', __FALSE__) == __TRUE__;
$doPartial      = ($args->argValue('partial;p', __FALSE__) == __TRUE__) && ($parseDownLibPresent);
$toExport       = trim($baseToExport) > '';

echo "YeAPF 0.8.63 $myself\nCopyright (C) 2004-2019 Esteban Daniel Dortta - dortta@yahoo.com - MIT License\n";
if (($toHelp) || (trim($filename) == '')) {
  echo "usage:\n";
  echo "\t$myself <filename> [output-folder] [--destroy] [--partial] [--quiet]\n";
  echo "\t\tfilename\tis a .xdb created by ydocbuilder\n";
  echo "\t\toutput-folder\tis used to write html files\n";
  echo "\t\t--quiet   \t(-q) shows minimal information\n";
  echo "\t\t--destroy \t(-d) clean the output-folder (delete all html files in folder)\n";
  echo "\t\t--partial \t(-p) write information only for those items that have a .md correspondent file\n";
  echo "\t\t--mdsource\t(-s) indicate where .md files are located. by default are at 'output-folder'\n";
  echo "\nIn orther to create your .md files, you can use a tool like https://stackedit.io/app#\n";
  echo "\nIn such case, you need to create each file with .md extension\n";
  echo "\nFor example: lib/grant_rights.js will become lib/grant_rights.js.md\n";
  echo "\n.md files are not deleted with -d parameter\n";
  exit(0);
}

// ydocviewer.min.js
$ydocviewer_min_js=base64_decode("dmFyIHlEb2NWaWV3ZXJPYmo9ZnVuY3Rpb24oKXt2YXIgYz17ZXhwYW5kRG9jdW1lbnQ6ZnVuY3Rpb24oYSl7dmFyIGI9eSQoIi5kb2NFbnRyeSIpO2ImJihiLmZvckVhY2goZnVuY3Rpb24oYSl7YS5zdHlsZS5kaXNwbGF5PSJub25lIn0pLGI9eSQoYSkpJiYoYi5zdHlsZS5kaXNwbGF5PSIiLGE9eSQoIi5leHBhbmRlci0iK2EpKSYmKGE9YVswXSxhLmFkZENsYXNzKCJmYS1yb3RhdGUtOTAiKSx3aW5kb3cuaG9tZUhpc3RvcnlQb3NpdGlvbi0tKX19LGQ9ZnVuY3Rpb24oYSl7YSYmYS50YXJnZXQmJih5JCgiLmV4cGFuZC1kb2N1bWVudCIpLmZvckVhY2goZnVuY3Rpb24oYSl7YS5kZWxldGVDbGFzcygiZmEtcm90YXRlLTkwIil9KSxhPWEudGFyZ2V0LmNsb3Nlc3QoIkEiKS5nZXRBdHRyaWJ1dGUoImRhdGEtaWQiKSxjLmV4cGFuZERvY3VtZW50KGEpKX07cmV0dXJuIGZ1bmN0aW9uKCl7YWRkRXZlbnQoImV4cGFuZC1kb2N1bWVudCIsImNsaWNrIixkKTt2YXIgYT1kb2N1bWVudC5sb2NhdGlvbi5ocmVmLnNwbGl0KCIjIik7CmEubGVuZ3RoPTI7Yy5leHBhbmREb2N1bWVudChhWzFdKX0oKX07YWRkT25Mb2FkTWFuYWdlcihmdW5jdGlvbigpe3dpbmRvdy55RG9jVmlld2VyPXlEb2NWaWV3ZXJPYmooKX0pOw==");

if (file_exists($filename)) {
  $xml = simplexml_load_file($filename);
  if ($toExport) {
    if (is_dir($baseToExport)) {
      if (file_exists("$baseToExport/$filename.html")) {
        if ($toDestroy) {
          if (!unlink("$baseToExport/$filename.html"))
            die("\nimpossible to delete '$baseToExport/$filename.html'\n");
        } else
          die("\n'$baseToExport/$filename.html' already exists. You can use '-d' parameter to destroy it\n");
      }
    } else if (!mkdir($baseToExport))
      die("\nimpossible to create '$baseToExport'\n");
  }

  $xdbInfo = showXdbInfo(0, $xml);
  if (!$doQuiet)
    echo $xdbInfo;
  $docMap = "<!DOCTYPE html>
              <html lang='en'>
                <head>
                  <meta charset='utf-8' />
                  <meta http-equiv='x-ua-compatible' content='ie=edge' />
                  <meta name='viewport' content='width=device-width, initial-scale=1' />

                  <title>" . basename($filename) . "</title>

                  <link rel='stylesheet' href='css/normalize.css' />
                  <link rel='stylesheet' href='css/milligram.css' />
                  <link rel='stylesheet' href='css/roboto.css' />
                  <link rel='stylesheet' href='css/font-awesome.css' />
                  <link rel='icon' href='images/favicon.png' />
                  <script src='js/yloader.min.js'></script>
                  <script src='js/ydocviewer.js'></script>
                </head>

                <style>
                  .docEntry {
                    padding-left: 16px;
                  }
                </style>

                <body><div class='container'><div class='row'><div class='column'><h1>YeAPF Documenter</h1><h3>YeAPF 0.8.63</h3><strong>Copyright (C) 2004-2019 Esteban Daniel Dortta - dortta@yahoo.com - MIT License</strong></div></div>";

  ksort($aMap);

  foreach ($aMap as $fileName => $elements) {
    $fileName = str_replace(".html", "", $fileName);
    $docMap .= "\n\n<div class='row'><div class='column'><h2>$fileName</h2></div></div>\n";
    $docMap .= "<div class='row'><div class='column'><ul>";
    foreach ($elements as $elemName => $aHref)
      $docMap .= "\t<li><a href='$aHref'>$elemName</a></li>\n";
    $docMap .= "</ul>\n</div><!--column-->\n</div><!--row-->\n";
  }
  $docMap .= "</div><!--container-->\n</body>\n</html>\n";
  file_put_contents("$baseToExport/" . basename($filename) . ".html", $docMap);

  if (!file_exists("$baseToExport/js/ydocviewer.min.js")) {
    if (!is_dir("$baseToExport/js")) {
      if (@mkdir("$baseToExport/js")) {
        if (false===@file_put_contents("$baseToExport/js/ydocviewer.min.js", $ydocviewer_min_js))
          echo "Was not possible to create '$baseToExport/js/ydocviewer.min.js'\n";
          exit(20);
      } else {
        echo "$baseToExport/js cannot be created\n";
        exit(20);
      }
    }
  }

} else
  die("\nfile '$filename' not found\n");
?>
