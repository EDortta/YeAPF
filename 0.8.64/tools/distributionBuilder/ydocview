#!/usr/bin/php
<?php
/*
tools/distributionBuilder/ydocview
YeAPF 0.8.64-7 built on 2020-03-20 13:04 (-3 DST)
Copyright (C) 2004-2020 Esteban Daniel Dortta - dortta@yahoo.com - MIT License
2019-07-29 09:41:19 (-3 DST)
*/

if (!function_exists("objet2array")) {
  function object2array($object) {
    return @json_decode(@json_encode($object), 1);
  }
}

global $outputFiles, $ofNdx, $aSequence, $aMap, $toDebug;
$ofNdx       = -1;
$aSequence   = -1;
$aMap        = array();
$outputFiles = array();
$toDebug     = false;

// ydocviewer.min.js
$ydocviewer_min_js=base64_decode("dmFyIHlEb2NWaWV3ZXJPYmo9ZnVuY3Rpb24oKXt2YXIgYz17ZXhwYW5kRG9jdW1lbnRCeUlkOmZ1bmN0aW9uKGEpe3ZhciBiPXkkKCIuZG9jRW50cnkiKSxjPSExO2ImJihiLmZvckVhY2goZnVuY3Rpb24oYSl7YS5zdHlsZS5kaXNwbGF5PSJub25lIn0pLGI9eSQoYSl8fGJbMF0sYT1iLmlkLGImJihiLnN0eWxlLmRpc3BsYXk9IiIsYT15JCgiLmV4cGFuZGVyLSIrYSkpKSYmKGE9YVswXSxhLmFkZENsYXNzKCJmYS1yb3RhdGUtOTAiKSx3aW5kb3cuaG9tZUhpc3RvcnlQb3NpdGlvbi0tLGM9ITApO3JldHVybiBjfX0sZD1mdW5jdGlvbihhKXthJiZhLnRhcmdldCYmKHkkKCIuZXhwYW5kLWRvY3VtZW50IikuZm9yRWFjaChmdW5jdGlvbihhKXthLmRlbGV0ZUNsYXNzKCJmYS1yb3RhdGUtOTAiKX0pLGE9YS50YXJnZXQuY2xvc2VzdCgiQSIpLmdldEF0dHJpYnV0ZSgiZGF0YS1pZCIpLGMuZXhwYW5kRG9jdW1lbnRCeUlkKGEpKX07cmV0dXJuIGZ1bmN0aW9uKCl7YWRkRXZlbnQoImV4cGFuZC1kb2N1bWVudCIsCiJjbGljayIsZCk7dmFyIGE9ZG9jdW1lbnQubG9jYXRpb24uaHJlZi5zcGxpdCgiIyIpfHxbXTsyPT1hLmxlbmd0aD9jLmV4cGFuZERvY3VtZW50QnlJZChhWzFdKXx8KHdpbmRvdy5ob21lSGlzdG9yeVBvc2l0aW9uPS0xKTooYT15JCgiLmV4cGFuZC1kb2N1bWVudCIpLDE9PWEubGVuZ3RoJiYoYy5leHBhbmREb2N1bWVudEJ5SWQoYVswXS5nZXRBdHRyaWJ1dGUoImRhdGEtaWQiKSkscmV0PSEwKSl9KCl9O2FkZE9uTG9hZE1hbmFnZXIoZnVuY3Rpb24oKXt3aW5kb3cueURvY1ZpZXdlcj15RG9jVmlld2VyT2JqKCl9KTsK");

//yloader.min.js
$yloader_min_js=base64_decode("");


function solveReferenceFromFile($targetFile, $hostFile) {
  global $baseToExport;
  if (substr($targetFile, 0, strlen($baseToExport)) == $baseToExport)
    $targetFile = substr($targetFile, strlen($baseToExport));
  if (substr($hostFile, 0, strlen($baseToExport)) == $baseToExport)
    $hostFile = substr($hostFile, strlen($baseToExport));
  $slashCount = substr_count($hostFile, "/") - 1;
  $ret = str_replace("//", "/", str_repeat("../", $slashCount).$targetFile);
  if (dirname($targetFile)==dirname($hostFile))
    $ret = basename($ret);
  if ($GLOBALS['toDebug']) {
    echo "+---------------------------------------------\n";
    echo "| $targetFile\n";
    echo "| $hostFile\n";
    echo "+---------------------------------------------\n";
    echo "| $ret\n";
    echo "+---------------------------------------------\n";
  }
  return $ret;
}

  function cssSource ($hostFile) {
    global $cssSourceArray;
    $ret = "\n";
    foreach($cssSourceArray as $key=>$value) {
      if (substr($value, 0, 2)=='//')
        $source = $value;
      else
        $source = solveReferenceFromFile($value, $hostFile);
      $ret.="\t<link rel='stylesheet' href='$source' />\n";
    }
    return $ret;
  }

function writeHTMLHeader($margin, $title="", $htmlFilename="") {
  global $outputFiles, $ofNdx, $baseToExport;
  if ($htmlFilename=="")
    $htmlFilename=$outputFiles[$ofNdx];

  $auxBase = str_replace("//", "/", dirname($htmlFilename));
  $auxBase = y_solve_parent_reference($auxBase);
  $slashCount = substr_count($auxBase,"/") - 1;
  $base     = str_repeat("../", $slashCount);
  $title=str_replace("//", "/", $title);
  $thisFileName=$title;
  if ($title=="")
    $thisFileName=$htmlFilename;
  $thisFileName=str_replace("//", "/", $thisFileName);

  $thisFileName=str_replace(".html", "", $thisFileName);
  $thisFileName="<a onclick='goBack()'><i class='fa fa-chevron-left' aria-hidden='true'></i></a>&nbsp;$thisFileName";

  file_put_contents($htmlFilename, "\n<!-- [ $base ] -->\n", FILE_APPEND);

  $cssSource = cssSource($htmlFilename);

  if (true) {
    $htmlText = "<!DOCTYPE html>
                  <html lang='en'>
                    <head>
                      <meta charset='utf-8' />
                      <meta http-equiv='x-ua-compatible' content='ie=edge' />
                      <meta name='viewport' content='width=device-width, initial-scale=1' />

                      <title>$title</title>

                      $cssSource

                      <link rel='icon' href='".$base."images/favicon.png' />
                      <script src='".$base."js/yloader.min.js'></script>
                      <script src='".$base."js/ydocviewer.min.js'></script>
                    </head>

                    <style>
                      .docEntry {
                        padding-left: 16px;
                      }
                    </style>

                    <script>
                    window.homeHistoryPosition = 0;
                      function goBack() {window.history.go(homeHistoryPosition);}
                    </script>

                    <body><h2>$thisFileName</h2>\n";
  } else {
    $htmlText="<!DOCTYPE html><html lang='en'><body>\n";
  }
  $htmlText .= "\n<!-- ".dirname($htmlFilename)."/$base -->\n";
  if ($GLOBALS['toDebug']) echo "@DEBUG  Writting $htmlFilename header --------\\\n";
  file_put_contents($htmlFilename, $htmlText, FILE_APPEND);
  chmod($htmlFilename, 0755);
}

function writeHTMLFooter($margin, $htmlFilename="") {
  global $outputFiles, $ofNdx;
  if ($htmlFilename=="")
    $htmlFilename=$outputFiles[$ofNdx];

  $htmlText = "<hr>\n";
  if ($margin<=1)
    $htmlText.="<small>YeAPF documenter 0.8.64 - Copyright (C) 2004-2020 Esteban Daniel Dortta - dortta@yahoo.com - MIT License</small></body></html>\n";
  if ($GLOBALS['toDebug']) echo "@DEBUG  Writting $htmlFilename footer --------/\n";
  file_put_contents($htmlFilename, $htmlText, FILE_APPEND);
  chmod($htmlFilename, 0755);
}

function replace_extension($filename, $new_extension) {
    $info = pathinfo($filename);
    $currentExt = '.'.$info['extension'];
    return $info['dirname'].'/'.$info['filename'] . $new_extension;
}



function processMDFile($sourceFilename) {
  global $baseToExport, $currentSourceFileName, $mdSourceFolder;

  $lastSourceFileName = $currentSourceFileName;
  $currentSourceFileName=$sourceFilename;

  $Parsedown = new Parsedown();
  $sourceFileContent = @file_get_contents($currentSourceFileName);
  $sourceFileContent = convertLatin1ToHtml($sourceFileContent);
  // $sourceFileContent = htmlentities($sourceFileContent, ENT_COMPAT | ENT_HTML5, ini_get("default_charset"), false );
  $currentSourceFileName = y_solve_parent_reference(substr($currentSourceFileName, strlen($baseToExport)));
  // echo "$currentSourceFileName\n";
  $ret = $Parsedown->text($sourceFileContent."\n\n>$currentSourceFileName");

  $pattern = '/<a[^>]+href=([\'"])(?<href>[\/.][a-z\-\/\.\#\_]*)\1[^>]*>/i';
  $ret = preg_replace_callback($pattern, function ($matches) {
            global $baseToExport, $currentSourceFileName, $toDestroy,
                   $mdSourceFolder, $dictionaryIndex;
            $auxHRef=$matches[0];
            $auxURL = $matches[2];
            $absoluteRef=(substr($auxURL, 0, 1) == "/");

            $cM = substr_count($matches[0], "/");
            $cB = substr_count($baseToExport, "/");

            if ((substr($auxURL, 0, 3) == "../")) {
              $cSlash = 0;
            } else {
              if ($absoluteRef)
                $cSlash = $cM - 1;
              else
                $cSlash = $cM - $cB + 1;
            }
            if ($GLOBALS['toDebug']) {
              print_r($matches);
              echo "\n@DEBUG URL m:$cM b:$cB cSlash: $cSlash auxHRef: $auxHRef\n";
            }
            //$c=substr_count($currentSourceFileName, "/")-1;

            $cc=preg_match('/([\'\"])(?<href>[\/.][a-z\-\/\.\#\_]*)\1[^>]*>/i', $matches[0], $arranjo);
            if ($cc) {
              $quote = $arranjo[1];
              $target = $arranjo[2];

              if ($absoluteRef) {
                $fileLocation = str_replace('//', '/', $baseToExport."/".$target);
              } else {
                $fileLocation = str_replace('//', '/', $baseToExport.dirname($currentSourceFileName)."/".str_repeat("../", $cSlash).$target);
              }
              $target = str_repeat("../", $cSlash).$target;
              if ($GLOBALS['toDebug']) echo "Crude:  ".$fileLocation."\n";
              $fileLocation=y_solve_parent_reference($fileLocation);
              if ($GLOBALS['toDebug']) echo "Solved: ".$fileLocation."\n";

              $auxTarget = solveReferenceFromFile($fileLocation, $currentSourceFileName);

              if ($GLOBALS['toDebug']) echo "MDFILE: $fileLocation \n  +---->( TGT: $target CURRENT: $currentSourceFileName ASREF: $auxTarget CSlash: $cSlash )\n";

              $fileResourceLocation = explode("#", $fileLocation);
              $ext = pathinfo($fileResourceLocation[0], PATHINFO_EXTENSION);
              if (mb_strtolower($ext)=="md") {

                $mdSource=explode(",", $mdSourceFolder);
                $found=false;
                $sourceInnerFilename = $fileResourceLocation[0];
                $importFolder = $baseToExport;
                for($c=0; $c<count($mdSource) && !$found; $c++) {
                  $folder=$mdSource[$c];
                  if ($folder!=$baseToExport) {
                    $auxSourceFilename = str_replace($baseToExport, $folder, $sourceInnerFilename);
                    $found=file_exists($auxSourceFilename);
                    if ($found) {
                      $importFolder = $folder;
                      $sourceInnerFilename=$auxSourceFilename;
                    }
                  }
                }

                if (file_exists($sourceInnerFilename)) {
                  // echo "$baseToExport\n$sourceInnerFilename ($importFolder)\n";
                  $auxTarget = str_replace(".$ext", ".html", $auxTarget);

                  $newFilename = str_replace(".$ext", ".html", $sourceInnerFilename);
                  $newFilename = str_replace($importFolder, $baseToExport, $newFilename);


                  $sourceTimestamp = filemtime($sourceInnerFilename);
                  if (file_exists($newFilename))
                    $targetTimestamp = filemtime($newFilename);
                  else {
                    $targetTimestamp = 0;
                  }

                  $simplifiedName = substr($newFilename, strlen($baseToExport));

                  if (!isset($dictionaryIndex[$simplifiedName])) {
                    $dictionaryIndex[$simplifiedName] = 0;
                  }
                  $dictionaryIndex[$simplifiedName]++;


                  if ($targetTimestamp<=$sourceTimestamp) {

                    $htmlTextFromMD = processMDFile($sourceInnerFilename);

                    $aName=basename($currentSourceFileName);

                    $htmlText = "<style>\n.crossRef { margin-left: 8px; padding-right: 8px; border-left: solid 2px #929eaa; margin-right: 8px; padding-left: 16px; }\n</style>\n";

                    $htmlText .= "<div class='container'><div class='row'><div class='column'><div class='docEntry' id='$aName' style='display:block'>$htmlTextFromMD</div></div></div></div>";

                    echo "Writting $newFilename\n";
                    if (!is_dir(dirname($newFilename))) {
                      echo "Creating ".dirname($newFilename)."\n";
                      mkdir(dirname($newFilename));
                    }

                    if (file_exists($newFilename))
                      unlink($newFilename);
                    writeHTMLHeader(0, $target, $newFilename);
                    if ($GLOBALS['toDebug']) echo "@DEBUG  Writting $newFilename content\n";
                    if (!@file_put_contents($newFilename, $htmlText, FILE_APPEND)) {
                      die("Was not possible to write $newFilename\n");
                    }

                  }
                  $retroTarget = str_replace(".$ext", ".html", solveReferenceFromFile($currentSourceFileName, $fileLocation));
                  if ($GLOBALS['toDebug']) echo "@DEBUG [ $retroTarget ]\n";

                  $c3 = preg_match('/(\.){2}(\/([a-z\-]*))*\.(([a-z])*)/i', $retroTarget, $expRetroHref);
                  if ($c3>0) {
                    $retroTarget = $expRetroHref[0];
                  }
                  $extRetroRef = pathinfo($retroTarget, PATHINFO_EXTENSION);

                  $retroHref = str_replace(".$extRetroRef", ".$extRetroRef.html", $retroTarget);
                  $retroHref = "<span class='crossRef'><em><a href='$retroHref'>$retroHref</a></em></span>";

                  $auxHTML = file_get_contents($newFilename);
                  if (!strpos($auxHTML, $retroHref))
                    file_put_contents($newFilename, $retroHref, FILE_APPEND);
                } else {
                  echo "WARNING: File not found: $sourceInnerFilename\n";
                }
              }


              $url=$auxTarget;
              $url=str_replace('//', '/', $url);
              if ($GLOBALS['toDebug']) echo "@DEBUG URL: $url\n";
              $href="<a href=\"$url\">";
            }
            return $href;
        }, $ret);
  $currentSourceFileName = $lastSourceFileName;
  return $ret;
}

function writeHTMLInfo($htmlText, $detailName="", $detail=null) {
  global $baseToExport, $mdSourceFolder, $toExport, $outputFiles, $ofNdx, $aMap, $aSequence, $doPartial,
         $currentSourceFileName;

  $canDo = false;
  if ($toExport) {
    $htmlText = trim($htmlText);
    if ($htmlText > '') {
      $aSequence++;
      $aName          = $detailName; //md5($aSequence);
      $targetFileName = substr($outputFiles[$ofNdx], strlen($baseToExport) + 1);
      if ($detailName > "") {
        $sourceFilename = replace_extension($outputFiles[$ofNdx], ".auxmd");
        $sourceFilename = str_replace(".auxmd", "-$detailName.md", $sourceFilename);
        if (!file_exists($sourceFilename)) {
          $mdSource=explode(",", $mdSourceFolder);
          $found=false;
          for($c=0; $c<count($mdSource) && !$found; $c++) {
            $folder=$mdSource[$c];
            if ($folder!=$baseToExport) {
              $auxSourceFilename = str_replace($baseToExport, $folder, $sourceFilename);
              $found=file_exists($auxSourceFilename);
              if ($found)
                $sourceFilename=$auxSourceFilename;
            }
          }
        }
        if (file_exists($sourceFilename)) {
          $documentationText = processMDFile($sourceFilename);
          $canDo=true;
        } else {
          $documentationText="File <b>$sourceFilename</b> not found.";
          $canDo = !$doPartial;
        }
      } else {
        $documentationText="Write your doc here...";
        $canDo=true;
      }
      if ($canDo) {
        /* main index entry */
        if (!isset($aMap[$targetFileName]))
          $aMap[$targetFileName] = array();
        $aMap[$targetFileName][$htmlText] = $targetFileName . "#$aName";

        if (is_array($detail)) {
          if ((isset($detail['code'])) && (!$doPartial)) {
            $codeInfo = ' md5: '.$detail['code']['md5'].' start: '.$detail['code']['start'].' end: '.$detail['code']['end'];
            $documentationText = "\n\n<div><pre>$codeInfo</pre></div>\n\n$documentationText\n\n";
          }
        }
        /* html body */
        $htmlText = "<div class='container'><div class='row'><div class='column'><a name='$aName'></a><h3><a href='#$aName' class='expand-document' data-id='$aName'><i class='fa fa-caret-right expander-$aName'></i>&nbsp;&nbsp;$htmlText</a></h3></div></div><div class='row'><div class='column'><div class='docEntry' id='$aName' style='display: none'>$documentationText</div></div></div></div>";
        file_put_contents($outputFiles[$ofNdx], $htmlText, FILE_APPEND);
        chmod($outputFiles[$ofNdx], 0755);
      }
    }
  }
  return $canDo;
}

function showXdbInfo($margin, $xml, $type = 'file') {
  global $baseToExport, $toExport, $outputFiles, $ofNdx, $toDestroy;

  $toDebug = true;

  $oldOfNdx = $ofNdx;

  $textReturn = "";
  if (isset($xml)) {
    $xml       = object2array($xml);
    $marginStr = str_repeat(" ", $margin * 2);
    foreach ($xml as $info => $detail) {
      if ($type == 'file') {
        if (isset($detail['folder'])) {
          $textReturn .= urldecode($marginStr . "$info at " . $detail['folder'] . "\n");
          if ($toExport) {
            $auxOutFolder = urldecode("$baseToExport/" . $detail['folder']);
            if (!file_exists($auxOutFolder))
              mkdir($auxOutFolder, 0755, true);
            $ofNdx++;
            $outputFiles[$ofNdx] = "$auxOutFolder/$info.html";
            if ($toExport) {
              if (file_exists($outputFiles[$ofNdx])) {
                if ($toDestroy) {
                  if (!unlink($outputFiles[$ofNdx]))
                    die("'" . $outputFiles[$ofNdx] . "' cannot be deleted");
                } else
                  die("'" . $outputFiles[$ofNdx] . "' already exists. Use '-d' to destroy\n");
              }
            }
          }
        }
      } else if ($type == 'func') {
        if (!is_numeric($info)) {
          if (isset($detail['name']))
            $detailName = $detail['name'];
          else
            $detailName = "";
          $funcDeclaration = urldecode($marginStr . "function " . $detailName . " (");
          $pCount          = 0;
          if (isset($detail['parameters'])) {
            foreach ($detail['parameters'] as $paramName => $dummy) {
              if ($pCount++ > 0)
                $funcDeclaration .= ", ";
              $funcDeclaration .= $paramName;
            }
          }
          $funcDeclaration .= ")\n";
          if (writeHTMLInfo($funcDeclaration, $detailName, $detail)) {
            if ($detailName>"") {
              $textReturn .= $funcDeclaration;
            }
          }

        }
      } else if ($type == 'class') {
        if (!is_numeric($info)) {
          $textReturn .= urldecode($marginStr . "class $info\n");
          writeHTMLInfo("class $info");
        }
      } else if ($type == 'inner') {
        $textReturn .= "*";
      }
      if ($type == 'file') {
        writeHTMLHeader($margin, $outputFiles[$ofNdx]);
      }
      $insideInfo = viewInside($margin, $detail);
      if ($type == 'file') {
        writeHTMLFooter($margin);
      }
      $textReturn .= $insideInfo;
    }
  }
  $ofNdx = $oldOfNdx;
  return $textReturn;
}

function deleteHTMLFiles($folder) {
  foreach (glob("$folder/*") as $filename) {
    if (is_dir($filename)) {
      deleteHTMLFiles($filename);
    } else {
      if (fnmatch("*.html", $filename)) {
        unlink($filename);
      }
    }
  }
}

function viewInside($margin, $detail) {

  $textReturn = "";
  $marginStr  = str_repeat(" ", $margin * 2);

  if (isset($detail['inner'])) {
    $textReturn .= viewInside($margin + 1, $detail['inner']);
  }
  if (isset($detail['classes'])) {
    $textReturn .= showXdbInfo($margin + 1, $detail['classes'], 'class');
  }
  if (isset($detail['functions'])) {
    $textReturn .= showXdbInfo($margin + 1, $detail['functions'], 'func');
  }

  return $textReturn;
}

$mydir      = dirname($_SERVER['SCRIPT_FILENAME']);
$cmRequired = false;
if (file_exists("$mydir/yclilib.php"))
  $cmLocation = "$mydir/yclilib.php";
else
  $cmLocation = "$mydir/../yclilib.php";

(@include_once "$cmLocation") or die("yclilib.php not found\n");

$parseDownLibPresent=false;
if (file_exists("$mydir/lib/Parsedown.php")) {
  (@include_once "$mydir/lib/Parsedown.php") or die("$mydir/lib/Parsedown.php not found\n");
  $parseDownLibPresent=true;
}
else
  echo "Parsedown library ($mydir/lib/Parsedown.php) not found.\nYou cannot do partial documentation\n";

$cwd            = getcwd();
$args           = new ArgumentsProcessor(false);
$myself         = basename($argv[0]);
$filename       = $args->getSrc(0);
$baseToExport   = $args->getSrc(1);
$fileTitle      = $args->argValue('title;t', basename($filename));
$mdSourceFolder = $args->argValue('mdsource;s', $baseToExport);
$toHelp         = $args->argValue('help;h', __FALSE__) == __TRUE__;
$toDestroy      = $args->argValue('destroy;d', __FALSE__) == __TRUE__;
$doQuiet        = $args->argValue('quiet;q', __FALSE__) == __TRUE__;
$doPartial      = ($args->argValue('partial;p', __FALSE__) == __TRUE__) && ($parseDownLibPresent);
$toExport       = trim($baseToExport) > '';

if (substr($baseToExport, strlen($baseToExport)-1,1)=="/")
  $baseToExport=substr($baseToExport, 0, strlen($baseToExport)-1);
$mdSourceFolder.=",$baseToExport";
$dictionaryIndex = array();


echo "YeAPF 0.8.64 $myself\nCopyright (C) 2004-2020 Esteban Daniel Dortta - dortta@yahoo.com - MIT License\n";
if (($toHelp) || (trim($filename) == '')) {
  echo "usage:\n";
  echo "\t$myself <filename> [output-folder] [--destroy] [--partial] [--quiet]\n";
  echo "\t\tfilename\tis a .xdb created by ydocbuilder\n";
  echo "\t\toutput-folder\tis used to write html files\n";
  echo "\t\t--title   \t(-t) file title (defaults to filename)\n";
  echo "\t\t--quiet   \t(-q) shows minimal information\n";
  echo "\t\t--destroy \t(-d) clean the output-folder (delete all html files in folder)\n";
  echo "\t\t--partial \t(-p) write information only for those items that have a .md correspondent file\n";
  echo "\t\t--mdsource\t(-s) indicate where .md files are located. By default are at 'output-folder'. use ',' to split folders\n";
  echo "In orther to create your .md files, you can use a tool like https://stackedit.io/app#\n";
  echo "In such case, you need to create each file with .md extension\n";
  echo "For example: lib/grant_rights.js will become lib/grant_rights.js.md\n";
  echo "NOTE: .md files are not deleted with -d parameter\n";
  exit(0);
}

clearstatcache();

$dbConnect='no';
error_reporting(E_ALL);
ini_set('display_errors', 1);
_LOAD_YEAPF_();

if (!$doQuiet) {
  echo "Processing $filename\n";
}

if (file_exists($filename)) {

  if ($toDestroy) {
    deleteHTMLFiles($baseToExport);
  }

  $xml = simplexml_load_file($filename);
  if ($toExport) {
    if (is_dir($baseToExport)) {
      if (file_exists("$baseToExport/$filename.html")) {
        if ($toDestroy) {
          if (!unlink("$baseToExport/$filename.html"))
            die("\nimpossible to delete '$baseToExport/$filename.html'\n");
        } else
          die("\n'$baseToExport/$filename.html' already exists. You can use '-d' parameter to destroy it\n");
      }
    } else if (!mkdir($baseToExport))
      die("\nimpossible to create '$baseToExport'\n");
  } else {
    echo "File not found: $filename\n";
  }

  if (file_exists("$baseToExport/css/normalize.css")) {
    $cssSourceArray = array( 'css/normalize.css',
                             'css/milligram.css',
                             'css/roboto.css',
                             'css/font-awesome.css');
  } else {
    $cssSourceArray = array(
                             '//cdn.rawgit.com/necolas/normalize.css/master/normalize.css',
                             '//cdn.rawgit.com/milligram/milligram/master/dist/milligram.min.css',
                             '//fonts.googleapis.com/css?family=Roboto:300,300italic,700,700italic',
                             '//stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css');
  }

  $mainIndexFilename = "$baseToExport/" . basename($filename) . ".html";
  $cssSource = cssSource($mainIndexFilename);

  $xdbInfo = showXdbInfo(0, $xml);
  if (!$doQuiet)
    echo $xdbInfo;
  $docMap = "<!DOCTYPE html>
              <html lang='en'>
                <head>
                  <meta charset='utf-8' />
                  <meta http-equiv='x-ua-compatible' content='ie=edge' />
                  <meta name='viewport' content='width=device-width, initial-scale=1' />

                  <title>$fileTitle</title>

                  $cssSource

                  <link rel='icon' href='images/favicon.png' />
                  <script src='js/yloader.min.js'></script>
                  <script src='js/ydocviewer.js'></script>
                </head>

                <style>
                  .docEntry {
                    padding-left: 16px;
                  }
                </style>

                <body><div class='container'><div class='row'><div class='column'><h1>YeAPF Documenter</h1><h3>YeAPF 0.8.64</h3><strong>Copyright (C) 2004-2020 Esteban Daniel Dortta - dortta@yahoo.com - MIT License</strong></div></div><a href='#crossReference'>Cross Reference</a><hr>\n";

  $dictionaryIndexText = "";
  ksort($dictionaryIndex);
  foreach ($dictionaryIndex as $indexEntry => $count) {
    echo "\t$indexEntry ($count)\n";
    if (substr($indexEntry,0,1)=="/")
      $indexEntry = substr($indexEntry,1);
    $indexEntryTag=basename($indexEntry);
    $dictionaryIndexText.="<li><a href='$indexEntry'>$indexEntryTag</a></li>\n";
  }
  $dictionaryIndexText="<div class='row'><div class='column'><H2><strong>Cross reference</strong></H2><ul>$dictionaryIndexText</ul></div></div>";

  ksort($aMap);

  foreach ($aMap as $auxFileName => $elements) {
    $auxFileName = str_replace(".html", "", $auxFileName);
    $docMap .= "\n\n<div class='row'><div class='column'><h2>$auxFileName</h2></div></div>\n";
    $docMap .= "<div class='row'><div class='column'><ul>";
    foreach ($elements as $elemName => $aHref)
      $docMap .= "\t<li><a href='$aHref'>$elemName</a></li>\n";
    $docMap .= "</ul>\n</div><!--column-->\n</div><!--row-->\n";
  }
  $docMap .= "\n<a name='crossReference'></a>\n$dictionaryIndexText\n</div><!--container-->\n</body>\n</html>\n";
  file_put_contents($mainIndexFilename, $docMap);
  if (!$doQuiet)
    echo "End.\n";


  if (!file_exists("$baseToExport/js/ydocviewer.min.js")) {
    if (!is_dir("$baseToExport/js")) {
      if (!@mkdir("$baseToExport/js")) {
        echo "$baseToExport/js cannot be created\n";
        exit(20);
      }
    }
    echo "Writting $baseToExport/js/ydocviewer.min.js\n";
    if (false===@file_put_contents("$baseToExport/js/ydocviewer.min.js", $ydocviewer_min_js)) {
      echo "Was not possible to create '$baseToExport/js/ydocviewer.min.js'\n";
      exit(20);
    }
  }

  if (!file_exists("$baseToExport/js/yloader.min.js")) {
    if (!is_dir("$baseToExport/js")) {
      if (!@mkdir("$baseToExport/js")) {
        echo "$baseToExport/js cannot be created\n";
        exit(20);
      }
    }
    echo "Writting $baseToExport/js/yloader.min.js\n";
    if (false===@file_put_contents("$baseToExport/js/yloader.min.js", $yloader_min_js)) {
      echo "Was not possible to create '$baseToExport/js/yloader.min.js'\n";
      exit(20);
    }
  }

} else
  die("\nfile '$filename' not found\n");
?>
